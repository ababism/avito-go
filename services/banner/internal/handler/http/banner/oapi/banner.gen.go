// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package oapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Banner defines model for Banner.
type Banner struct {
	// BannerId Идентификатор баннера
	BannerId *int `json:"banner_id,omitempty"`

	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content,omitempty"`

	// CreatedAt Дата создания баннера
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id,omitempty"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active,omitempty"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids,omitempty"`

	// UpdatedAt Дата обновления баннера
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// GetBannerParams defines parameters for GetBanner.
type GetBannerParams struct {
	FeatureId *int `form:"feature_id,omitempty" json:"feature_id,omitempty"`
	TagId     *int `form:"tag_id,omitempty" json:"tag_id,omitempty"`
	Limit     *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// PostBannerJSONBody defines parameters for PostBanner.
type PostBannerJSONBody struct {
	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content,omitempty"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id,omitempty"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active,omitempty"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids,omitempty"`
}

// PostBannerParams defines parameters for PostBanner.
type PostBannerParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// DeleteBannerIdParams defines parameters for DeleteBannerId.
type DeleteBannerIdParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// PatchBannerIdJSONBody defines parameters for PatchBannerId.
type PatchBannerIdJSONBody struct {
	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids"`
}

// PatchBannerIdParams defines parameters for PatchBannerId.
type PatchBannerIdParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// GetUserBannerParams defines parameters for GetUserBanner.
type GetUserBannerParams struct {
	TagId           int   `form:"tag_id" json:"tag_id"`
	FeatureId       int   `form:"feature_id" json:"feature_id"`
	UseLastRevision *bool `form:"use_last_revision,omitempty" json:"use_last_revision,omitempty"`

	// Token Токен пользователя
	Token *string `json:"token,omitempty"`
}

// PostBannerJSONRequestBody defines body for PostBanner for application/json ContentType.
type PostBannerJSONRequestBody PostBannerJSONBody

// PatchBannerIdJSONRequestBody defines body for PatchBannerId for application/json ContentType.
type PatchBannerIdJSONRequestBody PatchBannerIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение всех баннеров c фильтрацией по фиче и/или тегу
	// (GET /banner)
	GetBanner(c *gin.Context, params GetBannerParams)
	// Создание нового баннера
	// (POST /banner)
	PostBanner(c *gin.Context, params PostBannerParams)
	// Удаление баннера по идентификатору
	// (DELETE /banner/{id})
	DeleteBannerId(c *gin.Context, id int, params DeleteBannerIdParams)
	// Обновление содержимого баннера
	// (PATCH /banner/{id})
	PatchBannerId(c *gin.Context, id int, params PatchBannerIdParams)
	// Получение баннера для пользователя
	// (GET /user_banner)
	GetUserBanner(c *gin.Context, params GetUserBannerParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBanner operation middleware
func (siw *ServerInterfaceWrapper) GetBanner(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBannerParams

	// ------------- Optional query parameter "feature_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature_id", c.Request.URL.Query(), &params.FeatureId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter feature_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag_id", c.Request.URL.Query(), &params.TagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token", runtime.ParamLocationHeader, valueList[0], &Token)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
			return
		}

		params.Token = &Token

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBanner(c, params)
}

// PostBanner operation middleware
func (siw *ServerInterfaceWrapper) PostBanner(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBannerParams

	headers := c.Request.Header

	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token", runtime.ParamLocationHeader, valueList[0], &Token)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
			return
		}

		params.Token = &Token

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBanner(c, params)
}

// DeleteBannerId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBannerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteBannerIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token", runtime.ParamLocationHeader, valueList[0], &Token)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
			return
		}

		params.Token = &Token

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBannerId(c, id, params)
}

// PatchBannerId operation middleware
func (siw *ServerInterfaceWrapper) PatchBannerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchBannerIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token", runtime.ParamLocationHeader, valueList[0], &Token)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
			return
		}

		params.Token = &Token

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchBannerId(c, id, params)
}

// GetUserBanner operation middleware
func (siw *ServerInterfaceWrapper) GetUserBanner(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserBannerParams

	// ------------- Required query parameter "tag_id" -------------

	if paramValue := c.Query("tag_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument tag_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "tag_id", c.Request.URL.Query(), &params.TagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "feature_id" -------------

	if paramValue := c.Query("feature_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument feature_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "feature_id", c.Request.URL.Query(), &params.FeatureId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter feature_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "use_last_revision" -------------

	err = runtime.BindQueryParameter("form", true, false, "use_last_revision", c.Request.URL.Query(), &params.UseLastRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter use_last_revision: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token", runtime.ParamLocationHeader, valueList[0], &Token)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
			return
		}

		params.Token = &Token

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBanner(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/banner", wrapper.GetBanner)
	router.POST(options.BaseURL+"/banner", wrapper.PostBanner)
	router.DELETE(options.BaseURL+"/banner/:id", wrapper.DeleteBannerId)
	router.PATCH(options.BaseURL+"/banner/:id", wrapper.PatchBannerId)
	router.GET(options.BaseURL+"/user_banner", wrapper.GetUserBanner)
}
